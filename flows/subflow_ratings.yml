id: ratings_pipeline
namespace: zoomcamp

inputs:
  - id: table
    type: STRING
  - id: gcs_file_parquet
    type: STRING
  - id: parquet_file
    type: STRING

# dados para acessar o GCP
pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('gcp_credentials')}}" # GUI
      projectId: "{{kv('gcp_project_id')}}" # arquivo gcp_kv
      location: "{{kv('gcp_location')}}" # arquivo gcp_kv
      bucket: "{{kv('gcp_bucket_name')}}" # arquivo gcp_kv
      dataset: "{{kv('gcp_dataset')}}" # arquivo gcp_kv

tasks:
      - id: bq_ratings_table
        type: io.kestra.plugin.gcp.bigquery.Query
        description: Cria a tabela principal no BigQuery.
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('gcp_project_id')}}.{{inputs.table}}`
          (
              unique_row_id BYTES,
              filename STRING,
              tconst STRING,      
              averageRating FLOAT64,
              numVotes INTEGER
          );

      - id: bq_ratings_table_external
        type: io.kestra.plugin.gcp.bigquery.Query
        description: Cria a tabela externa com os dados do parquet do data lake.
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('gcp_project_id')}}.{{inputs.table}}_external`
          (
              tconst STRING,      
              averageRating FLOAT64,
              numVotes INTEGER
          )
          OPTIONS (
              format = 'PARQUET',
              uris = ['{{inputs.gcs_file_parquet}}']
          );

      - id: bq_ratings_table_tmp
        type: io.kestra.plugin.gcp.bigquery.Query
        description: Cria uma tabela temporária para ser mergeada com a tabela principal. Aqui eu crio um hash para identificar um registro de forma única.
        sql: |
          CREATE OR REPLACE TABLE `{{kv('gcp_project_id')}}.{{inputs.table}}_tmp`
          AS
          SELECT
            MD5(CONCAT(
              COALESCE(CAST(tconst AS STRING), ""),
              COALESCE(CAST(averageRating AS STRING), ""),
              COALESCE(CAST(numVotes AS STRING), "")
            )) AS unique_row_id,
            "{{inputs.parquet_file}}" AS filename, -- <== Aqui, defino manualmente
            tconst,      
            averageRating,
            numVotes  -- <== Aqui seleciono apenas as colunas necessárias ('*' pode dar erro')
          FROM `{{kv('gcp_project_id')}}.{{inputs.table}}_external`;

      - id: bq_ratings_table_merge
        type: io.kestra.plugin.gcp.bigquery.Query
        description: Merge entre a tabela principal e a tabela temporária.
        sql: |
          MERGE INTO 
            `{{kv('gcp_project_id')}}.{{inputs.table}}` T
          USING 
            `{{kv('gcp_project_id')}}.{{inputs.table}}_tmp` S
          ON 
            T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
          INSERT 
            (unique_row_id, filename, tconst, averageRating, numVotes)
          VALUES 
            (S.unique_row_id, S.filename, S.tconst, S.averageRating, S.numVotes);
      
      - id: bq_basics_table_tmp_truncate
        type: io.kestra.plugin.gcp.bigquery.Query
        description: Excluindo a tabela temporária e a tabela externa.
        sql: |
          DROP TABLE `{{kv('gcp_project_id')}}.{{inputs.table}}_tmp`;
          DROP TABLE `{{kv('gcp_project_id')}}.{{inputs.table}}_external`;